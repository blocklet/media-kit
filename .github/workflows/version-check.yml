name: "Version Check"

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      folders:
        description: "The folders that have changed"
        value: ${{ jobs.check-files.outputs.folders }}
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - edited
    branches:
      - master

jobs:
  check-files:
    if: "! contains(toJSON(github.event.commits.*.message), 'WIP') && !contains(toJSON(github.event.commits.*.message), 'wip')"
    runs-on: ubuntu-latest
    name: Check files changed
    outputs:
      folders: ${{ steps.format-changed-files.outputs.folders }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        env:
          MONITORED_DIRS: "blocklets|packages" # Configure which directories to monitor
          DIR_DEPTH: 2 # Configure depth (2 means dir/subdir)
        run: |
          # If pull request, compare the base and head
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            # For push event, compare the before and after
            BASE_SHA=${{ github.event.before }}
            HEAD_SHA=${{ github.event.after }}
            
            # Handle the empty case (like first run or force push)
            if [ -z "$BASE_SHA" ] || [ "$BASE_SHA" = "0000000000000000000000000000000000000000" ]; then
              # If it's the first run, use the parent commit of the last commit
              BASE_SHA=$(git rev-parse HEAD^)
              HEAD_SHA=$(git rev-parse HEAD)
            fi
          fi

          echo "$BASE_SHA...$HEAD_SHA"

          # Build pattern for grep based on monitored directories
          VERSION_PATTERN="(${MONITORED_DIRS})/.*/version"

          # Get the changed files list
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E "$VERSION_PATTERN" || true)

          # Extract the directory name and limit the depth based on configuration
          FOLDERS_JSON="["
          FIRST=true

          for file in $CHANGED_FILES; do
            # Extract the directory with configurable depth
            if [ "$DIR_DEPTH" -eq 1 ]; then
              # If depth is 1, just get the top-level directory
              DIR=$(echo $file | grep -oE "(${MONITORED_DIRS})" || true)
            else
              # If depth is 2 (default), get dir/subdir
              DIR=$(echo $file | grep -oE "(${MONITORED_DIRS})/[^/]+" || true)
            fi
            
            if [ ! -z "$DIR" ]; then
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                FOLDERS_JSON+=","
              fi
              FOLDERS_JSON+="\"$DIR\""
            fi
          done

          FOLDERS_JSON+="]"

          # Debug output
          echo "changed files: $CHANGED_FILES"
          echo "changed folders: $FOLDERS_JSON"

          # Set the output variable - Use single quotes to avoid double quote escaping issues
          echo 'all_changed_files='"$FOLDERS_JSON" >> $GITHUB_OUTPUT
      - name: List all changed files
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }} was changed"
      - name: Remove escapement
        id: format-changed-files
        run: |
          echo "folders=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_OUTPUT

  check-version:
    name: Check version changed
    needs: check-files
    if: " github.event_name == 'pull_request' "
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJSON(needs.check-files.outputs.folders) }}
    steps:
      - name: action-version-check
        uses: arcblock/action-version-check@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          working-directory: ${{ matrix.dir }}
